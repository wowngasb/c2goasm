package compiler

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"os"
)

// ReadLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string, header bool) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	w := bufio.NewWriter(file)
	if header {
		fmt.Fprintln(w, "//+build !noasm !appengine")
		fmt.Fprintln(w, "// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT")
		fmt.Fprintln(w, "")
	}
	for _, line := range lines {
		fmt.Fprintln(w, line)
	}
	return w.Flush()
}

func reverseBytes(hex string) string {

	result := ""
	for i := len(hex) - 2; i >= 0; i -= 2 {
		result = result + hex[i:i+2]
	}
	return result
}

func compactArray(opcodes []byte) []string {

	var result []string

	dst := make([]byte, hex.EncodedLen(len(opcodes)))
	hex.Encode(dst, opcodes)

	q := 0
	for ; q+31 < len(dst); q += 32 {
		result = append(result, fmt.Sprintf("    QUAD $0x%s; QUAD $0x%s", reverseBytes(string(dst[q:q+16])), reverseBytes(string(dst[q+16:q+32]))))
	}
	for ; q+15 < len(dst); q += 16 {
		result = append(result, fmt.Sprintf("    QUAD $0x%s", reverseBytes(string(dst[q:q+16]))))
	}
	if q < len(dst) {
		last := ""
		l := 0
		if q+7 < len(dst) {
			last += fmt.Sprintf("LONG $0x%s", reverseBytes(string(dst[q:q+8])))
			l = 8
		}
		w := 0
		if q+l+3 < len(dst) {
			if len(last) > 0 {
				last = last + "; "
			}
			last += fmt.Sprintf("WORD $0x%s", reverseBytes(string(dst[q+l:q+l+4])))
			w = 4
		}
		if q+l+w+1 < len(dst) {
			if len(last) > 0 {
				last = last + "; "
			}
			last += fmt.Sprintf("BYTE $0x%s", dst[q+l+w:q+l+w+2])
		}
		result = append(result, "    "+last)
	}

	return result
}

